var ui_utils = new Ui/Utils

func add_text(panel, y)
  var text = ui.AddText()
  text.anchor = top_left
  text.dock = top_left
  text.h = 1
  text.x = 1
  text.y = y
  panel.Add(text)
  return text

func init_panel()
  var panel = ui.AddPanel()
  panel.anchor = bottom_left
  panel.dock = bottom_left
  panel.x = 1
  panel.y = -1
  panel.h = 1 + 3 + 1

  var title_str = "Times"
  var title = ui.AddText(title_str)
  title.anchor = top_left
  title.dock = top_left
  title.w = string.Size(title_str)
  title.h = 1
  title.x = 1
  title.y = 0
  panel.Add(title)
  return panel

var panel
var best_text
var average_text
var current_text

?loc.begin | loc.loop
  panel = init_panel()
  best_text = add_text(panel, 1)
  average_text = add_text(panel, 2)
  current_text = add_text(panel, 3)

// UPDATE

var run_count = 0
var total_time_sum = 0
var average = 0
var best = 0
var worst = 0
var current = 0
var last = 0

?loc.loop
  ?run_count = 0
    best = current
    worst = current
  :?current < best
    best = current
  :?current > worst
    worst = current
  total_time_sum = total_time_sum + current
  run_count++
  average = total_time_sum / run_count
  current = 0

func update_text(component, new_text)
  component.text = new_text
  var size = string.Size(new_text)
  component.w = size
  return size

var best_size
best_size = update_text(best_text, "â†‘ " + time.FormatCasual(loc.bestTime))
var average_size
average_size = update_text(average_text, "~ " + time.FormatCasual(loc.averageTime))
var current_size
current_size = update_text(current_text, "= " + time.FormatCasual(time))

var max_size
max_size = math.Max(best_size, math.Max(average_size, current_size))
panel.w = 1 + max_size + 1
