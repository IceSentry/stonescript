var state_machine = import StateMachine
var collection = import Collection
var potion = import Potion

var utils = new Utils
var state_machine = new StateMachine

// ======
// consts
// ======

var fissure_cooldown = 18
var fissure_charge = 1
var heal_threshold = 70 //%

// =========
// variables
// =========

var haunted_ki
var is_haunted_ki_set = false
?loc.loop
  is_haunted_ki_set = false
?loc.name = haunted & screen.i = 7 & !is_haunted_ki_set
  haunted_ki = res.ki
  is_haunted_ki_set = true

var current_potion
current_potion = potion.get_current_potion()

var fissure_timer = 0
?loc.loop
  fissure_timer = 0

var is_ki_farming = false
?current_potion = "experience"
  is_ki_farming = true
  >ki farming enabled 

// ==========
// properties
// ==========

func hp_percentage()
  return utils.calc_percentage(hp, maxhp)

func armor_percentage()
  return utils.calc_percentage(armor, maxhp)

func state()
  return state_machine.state()

func is_combat()
  return state_machine.is_combat()

// =======
// methods
// =======

func equip_fissure()
  >fissure @fissure_timer@

  ?fissure_timer > 0 & time % 30 = 0
    fissure_timer-- // tick every second

  ?!item.CanActivate()
    return

  ?fissure_timer = 0
    fissure_timer = fissure_cooldown + fissure_charge

  ?fissure_timer >= fissure_cooldown
    state_machine.start_casting()
    equipL fissure // need to equip it for a while to charge
    // TODO equip +heal offhand for more damage
  :
    state_machine.stop_casting()

func equip_melee()
  // TODO only make this default equip which should probably play it safe with lifeleech

  ?hp_percentage() <= heal_threshold
    ?foe = immune_to_physical
      equipL vigor wand
    :
      equipL dL vigor d_sword
    equipR ah vigor shield
    return

  // left
  ?foe = immune_to_physical & foe ! immune_to_ranged
    equipL dL vigor wand
  :?foe.armor > 0
    equipL aether hammer
  :?foe.count > 2
    equipL big vigor sword
  :
    equipL vigor d_sword

  // right
  ?is_ki_farming & hp_percentage() = 100 & foe ! boss
    equipR ki
  :?foe = immune_to_stun & hp_percentage() <= heal_threshold
    equipR vigor shield
  :?foe ! immune_to_stun  & foe.debuffs.string ! stun
    equipR compound shield
  :?foe = immune_to_physical & foe ! immune_to_ranged
    equipR D vigor wand
  :?foe.count > 2 | foe.armor > 0
    equipR vigor d_sword
  :
    equipR fire d_sword

func equip_ranged()
  // TODO only make this default equip which should probably play it safe with lifeleech

  ?hp_percentage() <= heal_threshold
    equipL dL vigor wand
    ?foe = ranged 
      equipR vigor shield
    :
      equipR_wand()
  :?(foe = magic_resist | foe ! magic_vulnerability) & foe ! immune_to_physical
    equip repeating crossbow
  :?foe = Big Booo & screen.i = 7 & loc.name = haunted & is_haunted_ki_set & haunted_ki = res.ki
    equip repeating crossbow
  :
    equipL dL vigor wand
    equipR_wand()

func equipR_wand()
  ?foe = aether
    equipR D vigor wand
  :?foe = vigor
    equipR D poison wand
  :
    equipR moondial

func dodge()
  ?item.GetCooldown("mind") = 0
    equipL mind
    return true
  return false

func dash()
  ?item.CanActivate() & item.GetCooldown("quarterstaff") <= 0
    equip quarterstaff
    activate R
    return true
  return false

func combat_dash()
  ?!item.CanActivate() 
    return false
  
  ?item.GetCooldown("bash") <= 0
    equipL triskelion
    equipR bashing shield
    return true
  :?item.GetCooldown("dash") <= 0
    equipL triskelion
    equipR dashing shield
    return true
  :
    return dash()
  return false

func equip_passive_regen()
  equipR compound shield // generates armor
  equipL ouroboros // passive heal

func bardiche()
  ?foe.distance <= 9 & item.CanActivate() & 
  ^(item.GetCooldown("bardiche") = 0 | item.GetCooldown("bardiche") >= 882)
    equip bardiche
    activate R
    return true
  return false

// ======
// Potion
// ======
func potion_check()
  ?current_potion = "healing" & hp_percentage() <= 15
    activate potion
  :?current_potion = "experience" & state_machine.is_combat()
    activate potion 
  :?current_potion = "cleansing" & debuffs.count > 6 | hp_percentage() < 35
    activate potion
  :?current_potion = "lucky" & foe = boss & foe = phase & state_machine.is_combat() & !ai.idle
    activate potion

// =================
// Update
// =================

func default_update()
  state_machine.update()

  ?state_machine.state() = out_of_combat
    equip_passive_regen()
    ?hp_percentage() >= heal_threshold & !ai.idle
      equipL triskelion // gotta go fast
      ?dash()
        return

  :?state_machine.state() = boss_idle
    equip_passive_regen()

  :?state_machine.state() = collecting
    collection.collect()

  :?state_machine.state() = combat_ranged
    equip_ranged()

  :?state_machine.state() = combat_melee
    ?foe.distance > 11
      combat_dash()
    :
      equip_melee()

  :?state_machine.state() = casting
    >o1,1,#blue,casting

  potion_check()
