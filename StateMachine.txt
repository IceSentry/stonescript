var utils = new Utils
var collection = new Collection

var combat_distance = 25
var melee_distance = 8
var _is_running = false

var states = ["out_of_combat", "combat_melee", "combat_ranged", "collecting", "casting", "boss_idle"]
var out_of_combat = states.IndexOf("out_of_combat")
var combat_melee = states.IndexOf("combat_melee")
var combat_ranged = states.IndexOf("combat_ranged")
var collecting = states.IndexOf("collecting")
var casting = states.IndexOf("casting")
var boss_idle = states.IndexOf("boss_idle")

var _state = out_of_combat

func set_state(state)
  _state = states.IndexOf(state)

var boss_idle_timer = 0
func is_boss_idle()
  ?!(ai.idle & foe = boss)
    return false
  
  ?time % 30 = 0
    boss_idle_timer++

  ?foe.state = 1 & ( // not happy about this, but other bosses can be attacked in state 1
    ^foe.name = bronze | 
    ^(loc = cave & foe.time < 180) |
    ^loc = forest)
    return true
  :?foe.name = dysangelos & (foe.state = 126 | foe.state = 127)
    return true
  :?loc = crypt & (foe.state = 0 & boss_idle_timer < 5 | foe = phase2 & foe.state = 1)
    return true

func transition(state)
  // out_of_combat
  ?state = out_of_combat
    ?is_boss_idle()
      return boss_idle
    :?foe.distance < combat_distance
      return combat_ranged
    :?collection.can_collect()
      return collecting
    
  // collecting
  :?state = collecting
    ?foe.distance < combat_distance
      return combat_ranged
    ?!collection.can_collect()
      return out_of_combat

  // ranged
  :?state = combat_ranged
    ?is_boss_idle()
      return boss_idle
    :?foe.distance > combat_distance
      return out_of_combat
    :?foe.distance < melee_distance | foe = immune_to_ranged | foe.armor > 0
      return combat_melee
  
  // melee
  :?state = combat_melee
    ?is_boss_idle()
      return boss_idle
    :?foe.distance > combat_distance
      return out_of_combat

  // casting
  :?state = casting
    // no controlled transitions

  :?state = boss_idle
    ?is_boss_idle()
      return boss_idle
    :?foe.distance < combat_distance
      return combat_ranged

  // state unchanged
  return state

func start_casting()
  set_state("casting")

func stop_casting()
  set_state("combat_ranged")

func is_combat()
  return _state = combat_ranged | _state = combat_melee

func state()
  return states[_state]

func update()
  _state = transition(_state)
